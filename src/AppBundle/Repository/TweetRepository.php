<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Tweet;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TweetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TweetRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Find all tweets
     *
     * @param int|null $page
     * @return Paginator
     */
    public function findAll($page = 0): Paginator
    {
        $qb = $this->createQueryBuilder('tweet');

        return $this->paginateResult($qb, $page);
    }

    /**
     * Find tweets by search string
     *
     * @param string $search
     * @return Paginator
     */
    public function findBySearch(string $search): Paginator
    {
        $qb = $this->createQueryBuilder('tweet');
        $qb
            ->where($qb->expr()->like('tweet.content', ':search'))
            ->setParameter('search', "%$search%");

        return $this->paginateResult($qb, 1);
    }

    /**
     * Find last tweet by remoteId
     *
     * @return array|false
     */
    public function findLastByRemoteId(): ?array
    {
        $qb = $this
            ->createQueryBuilder('tweet')
            ->orderBy('tweet.remoteId', 'desc')
            ->setMaxResults(1);

        $result = $qb->getQuery()->getArrayResult();

        return $result[0] ?? null;
    }

    /**
     * Paginates result
     *
     * @param QueryBuilder $qb
     * @param int|null $page
     * @return Paginator
     */
    public function paginateResult(QueryBuilder $qb, $page): Paginator
    {
        if (!(int)$page) {
            $page = 1;
        }

        $qb
            ->orderBy('tweet.remoteId', 'DESC')
            ->setFirstResult(Tweet::PAGE_LIMIT * ($page - 1))
            ->setMaxResults(Tweet::PAGE_LIMIT);

        return new Paginator($qb->getQuery(), $fetchJoinCollection = true);
    }
}
